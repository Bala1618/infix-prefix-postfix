import java.util.Stack;
import java.util.Scanner;

class Main {
    public static int precedence(char operator) {
        switch (operator) {
            case '+':
            case '-':
                return 1;
            case '*':
            case '/':
                return 2;
            case '^':
                return 3;
        }
        return -1;
    }

    public static boolean check(char op1, char op2) {
        return precedence(op1) >= precedence(op2);
    }

    public static String infixToPostfix(String n) {
        StringBuilder postfix = new StringBuilder();
        Stack<Character> stack = new Stack<>();

        for (int i = 0; i < n.length(); i++) {
            char a = n.charAt(i);

            if (Character.isLetterOrDigit(a)) {
                postfix.append(a);
            } else if (a == '(') {
                stack.push(a);
            } else if (a == ')') {
                while (!stack.isEmpty() && stack.peek() != '(') {
                    postfix.append(stack.pop());
                }
                if (!stack.isEmpty() && stack.peek() != '(') {
                    return "Invalid Expression"; // invalid expression
                } else {
                    stack.pop();
                }
            } else { // an operator is encountered
                while (!stack.isEmpty() && check(stack.peek(), a)) {
                    postfix.append(stack.pop());
                }
                stack.push(a);
            }
        }

        // pop all the operators from the stack
        while (!stack.isEmpty()) {
            if (stack.peek() == '(') {
                return "Invalid Expression"; // invalid expression
            }
            postfix.append(stack.pop());
        }
        return postfix.toString();
    }

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        System.out.println("Enter the infix expression:");
        String n = sc.nextLine();

        String result = infixToPostfix(n);
        System.out.println("The postfix expression is:");
        System.out.println(result);
    }
}
